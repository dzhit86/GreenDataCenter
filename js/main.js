"use strict";

$(document).ready(function () {
  changeGlassField($(window).width());
  $('.slider-top').slick({
    slidesToShow: 1,
    arrows: false,
    dots: true,
    dotsClass: "slider-top__dots",
    customPaging: function customPaging(slider, i) {
      return '';
    }
  });

  function changeGlassField(width) {
    var centerColumnField = $(".section-top__center");
    var sliderTopField = $(".section-top__slider");

    if (width > 1024) {
      centerColumnField.addClass("glass-field");
      sliderTopField.removeClass("glass-field");
    } else {
      sliderTopField.addClass("glass-field");
      centerColumnField.removeClass("glass-field");
    }
  }

  var menuMain = $(".header-menu");
  var btnBurger = $(".header__burger");
  btnBurger.on("click", mobileMenu);

  function mobileMenu(event) {
    event.preventDefault();
    btnBurger.add(menuMain).toggleClass("_active");
  }

  function closeMenu() {
    btnBurger.add(menuMain).removeClass("_active");
  }

  $(window).resize(function () {
    if ($(this).outerWidth() >= 1182) {
      closeMenu();
    }

    changeGlassField($(window).width());
  });
  $(window).on("scroll", function () {
    if ($(window).scrollTop() > $(window).height()) {
      $('.scroll-top').css("display", "flex");
    } else {
      $('.scroll-top').css("display", "none");
    }
  });
  $(document).mouseup(function (e) {
    if (!menuMain.is(e.target) && menuMain.has(e.target).length === 0 && !btnBurger.is(e.target) && btnBurger.has(e.target).length === 0) {
      closeMenu();
    }
  });
  $(function () {
    var smoothLink = $('a[data-smooth]');
    smoothLink.on('click', function (event) {
      event.preventDefault();
      var sc = $(this).attr("href");

      if ($(sc).length) {
        var pad = $(sc).outerHeight() - $(sc).height() - 100,
            dn = $(sc).offset().top + pad;
        $('html, body').animate({
          scrollTop: dn
        }, 1000);
      } else {
        alert('Нет такой секции!');
      }
    });
  });

  (function (window) {
    function classReg(className) {
      return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
    }

    var hasClass, addClass, removeClass;

    if ('classList' in document.documentElement) {
      hasClass = function hasClass(elem, c) {
        return elem.classList.contains(c);
      };

      addClass = function addClass(elem, c) {
        elem.classList.add(c);
      };

      removeClass = function removeClass(elem, c) {
        elem.classList.remove(c);
      };
    } else {
      hasClass = function hasClass(elem, c) {
        return classReg(c).test(elem.className);
      };

      addClass = function addClass(elem, c) {
        if (!hasClass(elem, c)) {
          elem.className = elem.className + ' ' + c;
        }
      };

      removeClass = function removeClass(elem, c) {
        elem.className = elem.className.replace(classReg(c), ' ');
      };
    }

    function toggleClass(elem, c) {
      var fn = hasClass(elem, c) ? removeClass : addClass;
      fn(elem, c);
    }

    var classie = {
      hasClass: hasClass,
      addClass: addClass,
      removeClass: removeClass,
      toggleClass: toggleClass,
      has: hasClass,
      add: addClass,
      remove: removeClass,
      toggle: toggleClass
    };

    if (typeof define === 'function' && define.amd) {
      define(classie);
    } else {
      window.classie = classie;
    }
  })(window);

  (function () {
    if (!String.prototype.trim) {
      (function () {
        var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

        String.prototype.trim = function () {
          return this.replace(rtrim, '');
        };
      })();
    }

    [].slice.call(document.querySelectorAll('.form__field')).forEach(function (inputEl) {
      if (inputEl.value.trim() !== '') {
        classie.add(inputEl.parentNode, 'input--filled');
      } // events:


      inputEl.addEventListener('focus', onInputFocus);
      inputEl.addEventListener('blur', onInputBlur);
    });

    function onInputFocus(ev) {
      classie.add(ev.target.parentNode, 'input--filled');
    }

    function onInputBlur(ev) {
      if (ev.target.value.trim() === '') {
        classie.remove(ev.target.parentNode, 'input--filled');
      }
    }
  })();

  $('.section-top__topbg').parallax({
    posX: "center",
    posY: "center",
    src: "img/bg-header.webp",
    bleed: 50,
    speed: -.2
  });
  var show = true;
  var countbox = ".section-stat";
  $(window).on("scroll load resize", function () {
    if (!show) return false;
    var w_top = $(window).scrollTop();
    var e_top = $(countbox).offset().top;
    var w_height = $(window).height();
    var d_height = $(document).height();
    var e_height = $(countbox).outerHeight();

    if (w_top + 500 >= e_top || w_height + w_top == d_height || e_height + e_top < w_height) {
      $('.section-stat__value').css('opacity', '1');
      $('.section-stat__value').spincrement({
        thousandSeparator: "",
        duration: 4000
      });
      show = false;
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,